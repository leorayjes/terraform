name: Terraform CI/CD

on:
  push:
  pull_request:
    branches: [ "main" ]

env:
  TF_VERSION: "1.9.0"  # Specify your preferred Terraform version

jobs:
  terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest
    
    # Required permissions for the job
    permissions:
      contents: read
      pull-requests: write  # For commenting on PRs
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # Set to true if you want to capture outputs

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: "mock"
          AWS_SECRET_ACCESS_KEY: "mock"
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_EC2_METADATA_DISABLED: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          AWS_ACCESS_KEY_ID: "mock"
          AWS_SECRET_ACCESS_KEY: "mock"
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_EC2_METADATA_DISABLED: true
          AWS_SDK_LOAD_CONFIG: false



      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            ## Terraform Results üöÄ
            
            ### Format and Style üé®
            \`\`\`
            ${{ steps.fmt.outcome == 'success' && '‚úÖ Terraform fmt check passed' || '‚ùå Terraform fmt check failed' }}
            \`\`\`
            
            ### Initialization ‚ö°
            \`\`\`
            ${{ steps.init.outcome == 'success' && '‚úÖ Terraform init succeeded' || '‚ùå Terraform init failed' }}
            \`\`\`
            
            ### Validation üîç
            \`\`\`
            ${{ steps.validate.outcome == 'success' && '‚úÖ Terraform validate succeeded' || '‚ùå Terraform validate failed' }}
            \`\`\`
            
            *Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Fail Pipeline on Errors
        if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: |
          echo "‚ùå Pipeline failed due to errors in terraform commands"
          exit 1